{"remainingRequest":"/Users/andrii/Documents/VS Code/Vue_learn/GeographicalKnowledge/WorkSpace/GeographicalKnowledge/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/andrii/Documents/VS Code/Vue_learn/GeographicalKnowledge/WorkSpace/GeographicalKnowledge/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/andrii/Documents/VS Code/Vue_learn/GeographicalKnowledge/WorkSpace/GeographicalKnowledge/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrii/Documents/VS Code/Vue_learn/GeographicalKnowledge/WorkSpace/GeographicalKnowledge/src/components/QuestionsBlock.vue?vue&type=template&id=4e1b4970&scoped=true&","dependencies":[{"path":"/Users/andrii/Documents/VS Code/Vue_learn/GeographicalKnowledge/WorkSpace/GeographicalKnowledge/src/components/QuestionsBlock.vue","mtime":1624476444817},{"path":"/Users/andrii/Documents/VS Code/Vue_learn/GeographicalKnowledge/WorkSpace/GeographicalKnowledge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrii/Documents/VS Code/Vue_learn/GeographicalKnowledge/WorkSpace/GeographicalKnowledge/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/andrii/Documents/VS Code/Vue_learn/GeographicalKnowledge/WorkSpace/GeographicalKnowledge/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrii/Documents/VS Code/Vue_learn/GeographicalKnowledge/WorkSpace/GeographicalKnowledge/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5zdGFydGVyCiAgICA/IF9jKCJkaXYiLCBbCiAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIlBvZGFqIGlsb8WbxIcgcHl0YcWEIildKSwKICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnF1ZXN0aW9uQ291bnQsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicXVlc3Rpb25Db3VudCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJudW1iZXIiLCBtaW46ICIwIiwgbWF4OiBfdm0uZGF0YXMubGVuZ3RoIH0sCiAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ucXVlc3Rpb25Db3VudCB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF92bS5xdWVzdGlvbkNvdW50ID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygiYnV0dG9uIiwgeyBvbjogeyBjbGljazogX3ZtLnN0YXJ0IH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIlJvenBvY3puaWogdGVzdCIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKAogICAgICAgICAgInAiLAogICAgICAgICAgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICB2YWx1ZTogISgKICAgICAgICAgICAgICAgICAgX3ZtLnF1ZXN0aW9uQ291bnQgPiAwICYmIF92bS5xdWVzdGlvbkNvdW50IDw9IF92bS5kYXRhcy5sZW5ndGgKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAiIShxdWVzdGlvbkNvdW50ID4gMCAmJiBxdWVzdGlvbkNvdW50IDw9IGRhdGFzLmxlbmd0aCkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBzdGF0aWNDbGFzczogImVycm9yIgogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIldwcm93YWTFuiB3YXJ0b8WbxIcgb2QgMSBkbyAiICsgX3ZtLl9zKF92bS5kYXRhcy5sZW5ndGgpKV0KICAgICAgICApCiAgICAgIF0pCiAgICA6IF92bS5xdWVzdGlvbgogICAgPyBfYygiZGl2IiwgWwogICAgICAgIF9jKCJoMyIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgX3ZtLl9zKF92bS5xdWVzdGlvbkluZGV4ICsgMSkgKwogICAgICAgICAgICAgICIvIiArCiAgICAgICAgICAgICAgX3ZtLl9zKF92bS5xdWVzdGlvbkNvdW50KSArCiAgICAgICAgICAgICAgIiAiICsKICAgICAgICAgICAgICBfdm0uX3MoX3ZtLnF1ZXN0aW9uLnF1ZXN0aW9uKQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKAogICAgICAgICAgInVsIiwKICAgICAgICAgIF92bS5fbChfdm0ucXVlc3Rpb24uYW5zd2VycywgZnVuY3Rpb24oYW5zd2VyKSB7CiAgICAgICAgICAgIHJldHVybiBfYygibGkiLCB7IGtleTogYW5zd2VyLmFuc3dlciB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJhbnN3ZXItYmxvY2siIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJsYWJlbCIsIFsKICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYW5zd2VyW192bS5xdWVzdGlvbkluZGV4XSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImFuc3dlcltxdWVzdGlvbkluZGV4XSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJyYWRpbyIgfSwKICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogewogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFuc3dlciwKICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IF92bS5fcShhbnN3ZXJbX3ZtLnF1ZXN0aW9uSW5kZXhdLCBhbnN3ZXIpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS4kc2V0KGFuc3dlciwgX3ZtLnF1ZXN0aW9uSW5kZXgsIGFuc3dlcikKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiICsgX3ZtLl9zKGFuc3dlci5hbnN3ZXIpICsgIiAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgfSksCiAgICAgICAgICAwCiAgICAgICAgKSwKICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsgZGlzYWJsZWQ6IF92bS5xdWVzdGlvbkluZGV4ID09IDAgfSwKICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnByZXZpb3VzIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiUG9wcnplZG5pZSBweXRhbmllIildCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIV92bS5jaGVja0xhc3QsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIhY2hlY2tMYXN0IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5uZXh0IH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiS29sZWpuZSBweXRhbmllIildCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmNoZWNrTGFzdCwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImNoZWNrTGFzdCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2hvd1Jlc3VsdCB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlpha2/FhGN6IGkgem9iYWN6IHd5bmlrIildCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIDogX3ZtLnJlc3VsdAogICAgPyBfYygiZGl2IiwgWwogICAgICAgIF9jKCJoMyIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlBvcHJhd255Y2ggb2Rwb3dpZWR6aTogIiArCiAgICAgICAgICAgICAgX3ZtLl9zKF92bS5jb3VudENvcnJlY3RBbnN3ZXIpICsKICAgICAgICAgICAgICAiLyIgKwogICAgICAgICAgICAgIF92bS5fcyhfdm0ucXVlc3Rpb25Db3VudCkKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgOiBfdm0uX2UoKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}